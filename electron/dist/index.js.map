{"version":3,"sources":["../src/index.ts","../src/client.ts","../src/constants.ts","../src/util.ts","../src/transports/ipc.ts"],"sourcesContent":["import Client from './client';\r\n\r\nexport default Client;\r\n\r\nexport { Client };","import { EventEmitter } from 'events';\r\nimport { setTimeout, clearTimeout } from 'timers';\r\nimport { RPCCommands, RPCEvents } from './constants';\r\nimport { pid as getPid, uuid4122 as uuid } from './util';\r\nimport { Snowflake, Presence, RawPresence } from './interface';\r\nimport IPCTransport from './transports/ipc';\r\n\r\ndeclare interface RPCClient {\r\n\ton(event: 'ready', listener: (transport: IPCTransport) => void): this;\r\n\ton(event: 'connected', listener: (transport: IPCTransport) => void): this;\r\n\ton(\r\n\t\tevent: 'disconnected',\r\n\t\tlistener: (transport: IPCTransport) => void,\r\n\t): this;\r\n\ton(event: string, listener: Function): this;\r\n}\r\n\r\nclass RPCClient extends EventEmitter {\r\n\ttransports: Map<number, IPCTransport> = new Map();\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tconnect(\r\n\t\tclientId: Snowflake,\r\n\t\tid: number | undefined = this.transports.size,\r\n\t): Promise<IPCTransport> {\r\n\t\tconst promise = new Promise((resolve, reject) => {\r\n\t\t\tconst transport = new IPCTransport(this);\r\n\t\t\ttransport.clientId = clientId;\r\n\t\t\tfunction handleMessage(this: IPCTransport, message: any) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tmessage.cmd === RPCCommands.DISPATCH &&\r\n\t\t\t\t\tmessage.evt === RPCEvents.READY\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (message.data.user) {\r\n\t\t\t\t\t\tthis.user = message.data.user;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.fetchAssets().then(() => {\r\n\t\t\t\t\t\tthis.client.emit('connected', this);\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if (this._expecting.has(message.nonce)) {\r\n\t\t\t\t\tconst { resolve, reject } = this._expecting.get(\r\n\t\t\t\t\t\tmessage.nonce,\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (message.evt === 'ERROR') {\r\n\t\t\t\t\t\tconst e = new Error(message.data.message) as any;\r\n\t\t\t\t\t\te.code = message.data.code;\r\n\t\t\t\t\t\te.data = message.data;\r\n\t\t\t\t\t\treject(e);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (message.cmd === RPCEvents.SET_ACTIVITY) {\r\n\t\t\t\t\t\t\tthis.activity = message.data;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresolve(message.data);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._expecting.delete(message.nonce);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.client.emit(message.evt, message.data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttransport.on('message', handleMessage.bind(transport));\r\n\t\t\tconst timeout = setTimeout(\r\n\t\t\t\t() => reject(new Error('RPC_CONNECTION_TIMEOUT')),\r\n\t\t\t\t10e3,\r\n\t\t\t);\r\n\t\t\ttimeout.unref();\r\n\t\t\tfunction handleConnected(\r\n\t\t\t\tthis: RPCClient,\r\n\t\t\t\ttransport_: IPCTransport,\r\n\t\t\t) {\r\n\t\t\t\tif (transport.ipcId === transport_.ipcId) {\r\n\t\t\t\t\tclearTimeout(timeout);\r\n\t\t\t\t\tthis.transports.set(transport.ipcId, transport);\r\n\t\t\t\t\tresolve(transport);\r\n\t\t\t\t\tthis.removeListener('connected', handleConnected);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.on('connected', handleConnected.bind(this));\r\n\t\t\ttransport.once('close', () => {\r\n\t\t\t\ttransport._expecting.forEach((e) => {\r\n\t\t\t\t\te.reject(new Error('connection closed'));\r\n\t\t\t\t});\r\n\t\t\t\tthis.emit('disconnected', transport);\r\n\t\t\t\treject(new Error('connection closed'));\r\n\t\t\t});\r\n\t\t\ttransport.connect(id).catch(reject);\r\n\t\t});\r\n\t\treturn promise as Promise<IPCTransport>;\r\n\t}\r\n\r\n\tasync login(\r\n\t\t{ clientId, ipcId } = {} as { clientId: Snowflake; ipcId?: number },\r\n\t) {\r\n\t\tconst transport = await this.connect(clientId, ipcId);\r\n\t\tthis.emit('ready', transport);\r\n\t\treturn transport;\r\n\t}\r\n\r\n\tprivate request(ipcId = 0, cmd: string, args: object): Promise<any> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst nonce = uuid();\r\n\t\t\tconst transport = this.transports.get(ipcId);\r\n\t\t\tif (!transport) {\r\n\t\t\t\treturn reject(new Error(`ID ${ipcId} is not connected`));\r\n\t\t\t}\r\n\t\t\tif (cmd == RPCCommands.SET_ACTIVITY) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (args.activity && args.activity.assets) {\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\targs.activity.assets = {\r\n\t\t\t\t\t\tlarge_image: transport.parseImageAnyToAsset(\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\targs.activity.assets.large_image,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tlarge_text: args.activity.assets.large_text,\r\n\t\t\t\t\t\tsmall_image: transport.parseImageAnyToAsset(\r\n\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\targs.activity.assets.small_image,\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tsmall_text: args.activity.assets.small_text,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttransport.send({ cmd, args, evt: undefined, nonce });\r\n\t\t\ttransport._expecting.set(nonce, { resolve, reject });\r\n\t\t});\r\n\t}\r\n\r\n\tsetActivity(\r\n\t\targs = {} as Presence,\r\n\t\tpid = getPid(),\r\n\t\tipcId = 0,\r\n\t): Promise<RawPresence> {\r\n\t\tlet timestamps;\r\n\t\tlet assets;\r\n\t\tlet party;\r\n\t\tlet secrets;\r\n\t\tif (args.startTimestamp || args.endTimestamp) {\r\n\t\t\ttimestamps = {\r\n\t\t\t\tstart: args.startTimestamp,\r\n\t\t\t\tend: args.endTimestamp,\r\n\t\t\t};\r\n\t\t\tif (timestamps.start instanceof Date) {\r\n\t\t\t\ttimestamps.start = Math.round(timestamps.start.getTime());\r\n\t\t\t}\r\n\t\t\tif (timestamps.end instanceof Date) {\r\n\t\t\t\ttimestamps.end = Math.round(timestamps.end.getTime());\r\n\t\t\t}\r\n\t\t\tif ((timestamps.start as number) > 2147483647000) {\r\n\t\t\t\tthrow new RangeError(\r\n\t\t\t\t\t'timestamps.start must fit into a unix timestamp',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif ((timestamps.end as number) > 2147483647000) {\r\n\t\t\t\tthrow new RangeError(\r\n\t\t\t\t\t'timestamps.end must fit into a unix timestamp',\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\targs.largeImageKey ||\r\n\t\t\targs.largeImageText ||\r\n\t\t\targs.smallImageKey ||\r\n\t\t\targs.smallImageText\r\n\t\t) {\r\n\t\t\tassets = {\r\n\t\t\t\tlarge_image: args.largeImageKey,\r\n\t\t\t\tlarge_text: args.largeImageText,\r\n\t\t\t\tsmall_image: args.smallImageKey,\r\n\t\t\t\tsmall_text: args.smallImageText,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (args.partySize || args.partyId || args.partyMax) {\r\n\t\t\tparty = { id: args.partyId } as {\r\n\t\t\t\tid?: string;\r\n\t\t\t\tsize?: number[];\r\n\t\t\t};\r\n\t\t\tif (!party.id) {\r\n\t\t\t\tparty.id = uuid();\r\n\t\t\t}\r\n\t\t\tif (args.partySize || args.partyMax) {\r\n\t\t\t\tparty.size = [\r\n\t\t\t\t\targs.partySize as number,\r\n\t\t\t\t\targs.partyMax as number,\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (args.matchSecret || args.joinSecret || args.spectateSecret) {\r\n\t\t\tsecrets = {\r\n\t\t\t\tmatch: args.matchSecret,\r\n\t\t\t\tjoin: args.joinSecret,\r\n\t\t\t\tspectate: args.spectateSecret,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn this.request(ipcId, RPCCommands.SET_ACTIVITY, {\r\n\t\t\tpid,\r\n\t\t\tactivity: {\r\n\t\t\t\ttype: 0, // Playing\r\n\t\t\t\tstate: args.state,\r\n\t\t\t\tdetails: args.details,\r\n\t\t\t\ttimestamps,\r\n\t\t\t\tassets,\r\n\t\t\t\tparty,\r\n\t\t\t\tsecrets,\r\n\t\t\t\tbuttons: args.buttons,\r\n\t\t\t\tinstance: !!args.instance,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tclearActivity(pid = getPid(), ipcId = 0) {\r\n\t\treturn this.request(ipcId, RPCCommands.SET_ACTIVITY, {\r\n\t\t\tpid,\r\n\t\t});\r\n\t}\r\n\r\n\tasync destroy() {\r\n\t\tawait Promise.all(\r\n\t\t\tArray.from(this.transports.values()).map((t) => t.close()),\r\n\t\t);\r\n\t}\r\n\r\n\tasync fetchOpenSocket() {\r\n\t\tconst opens: number[] = []\r\n\t\tfor (let i = 0; i < 10; i++) {\r\n\t\t\tconst trans = new IPCTransport(this);\r\n\t\t\topens.push(i);\r\n\t\t\tawait trans.connect(i).catch(() => {\r\n\t\t\t\topens.pop();\r\n\t\t\t});\r\n\t\t\ttrans.close();\r\n\t\t}\r\n\t\treturn opens;\r\n\t}\r\n}\r\n\r\nexport default RPCClient;\r\n","function keyMirror<T extends string>(arr: T[]): Record<T, T> {\r\n\tconst tmp: Record<T, T> = {} as Record<T, T>;\r\n\tfor (const value of arr) {\r\n\t\ttmp[value] = value;\r\n\t}\r\n\treturn tmp;\r\n}\r\n\r\nexport const browser: boolean = typeof window !== 'undefined';\r\n\r\nexport const RPCCommands = keyMirror([\r\n\t'DISPATCH',\r\n\t'AUTHORIZE',\r\n\t'AUTHENTICATE',\r\n\t'GET_GUILD',\r\n\t'GET_GUILDS',\r\n\t'GET_CHANNEL',\r\n\t'GET_CHANNELS',\r\n\t'CREATE_CHANNEL_INVITE',\r\n\t'GET_RELATIONSHIPS',\r\n\t'GET_USER',\r\n\t'SUBSCRIBE',\r\n\t'UNSUBSCRIBE',\r\n\t'SET_USER_VOICE_SETTINGS',\r\n\t'SET_USER_VOICE_SETTINGS_2',\r\n\t'SELECT_VOICE_CHANNEL',\r\n\t'GET_SELECTED_VOICE_CHANNEL',\r\n\t'SELECT_TEXT_CHANNEL',\r\n\t'GET_VOICE_SETTINGS',\r\n\t'SET_VOICE_SETTINGS_2',\r\n\t'SET_VOICE_SETTINGS',\r\n\t'CAPTURE_SHORTCUT',\r\n\t'SET_ACTIVITY',\r\n\t'SEND_ACTIVITY_JOIN_INVITE',\r\n\t'CLOSE_ACTIVITY_JOIN_REQUEST',\r\n\t'ACTIVITY_INVITE_USER',\r\n\t'ACCEPT_ACTIVITY_INVITE',\r\n\t'INVITE_BROWSER',\r\n\t'DEEP_LINK',\r\n\t'CONNECTIONS_CALLBACK',\r\n\t'BRAINTREE_POPUP_BRIDGE_CALLBACK',\r\n\t'GIFT_CODE_BROWSER',\r\n\t'GUILD_TEMPLATE_BROWSER',\r\n\t'OVERLAY',\r\n\t'BROWSER_HANDOFF',\r\n\t'SET_CERTIFIED_DEVICES',\r\n\t'GET_IMAGE',\r\n\t'CREATE_LOBBY',\r\n\t'UPDATE_LOBBY',\r\n\t'DELETE_LOBBY',\r\n\t'UPDATE_LOBBY_MEMBER',\r\n\t'CONNECT_TO_LOBBY',\r\n\t'DISCONNECT_FROM_LOBBY',\r\n\t'SEND_TO_LOBBY',\r\n\t'SEARCH_LOBBIES',\r\n\t'CONNECT_TO_LOBBY_VOICE',\r\n\t'DISCONNECT_FROM_LOBBY_VOICE',\r\n\t'SET_OVERLAY_LOCKED',\r\n\t'OPEN_OVERLAY_ACTIVITY_INVITE',\r\n\t'OPEN_OVERLAY_GUILD_INVITE',\r\n\t'OPEN_OVERLAY_VOICE_SETTINGS',\r\n\t'VALIDATE_APPLICATION',\r\n\t'GET_ENTITLEMENT_TICKET',\r\n\t'GET_APPLICATION_TICKET',\r\n\t'START_PURCHASE',\r\n\t'GET_SKUS',\r\n\t'GET_ENTITLEMENTS',\r\n\t'GET_NETWORKING_CONFIG',\r\n\t'NETWORKING_SYSTEM_METRICS',\r\n\t'NETWORKING_PEER_METRICS',\r\n\t'NETWORKING_CREATE_TOKEN',\r\n\t'SET_USER_ACHIEVEMENT',\r\n\t'GET_USER_ACHIEVEMENTS',\r\n]);\r\n\r\nexport const RPCEvents = keyMirror([\r\n\t'CURRENT_USER_UPDATE',\r\n\t'GUILD_STATUS',\r\n\t'GUILD_CREATE',\r\n\t'CHANNEL_CREATE',\r\n\t'RELATIONSHIP_UPDATE',\r\n\t'VOICE_CHANNEL_SELECT',\r\n\t'VOICE_STATE_CREATE',\r\n\t'VOICE_STATE_DELETE',\r\n\t'VOICE_STATE_UPDATE',\r\n\t'VOICE_SETTINGS_UPDATE',\r\n\t'VOICE_SETTINGS_UPDATE_2',\r\n\t'VOICE_CONNECTION_STATUS',\r\n\t'SPEAKING_START',\r\n\t'SPEAKING_STOP',\r\n\t'GAME_JOIN',\r\n\t'GAME_SPECTATE',\r\n\t'ACTIVITY_JOIN',\r\n\t'ACTIVITY_JOIN_REQUEST',\r\n\t'ACTIVITY_SPECTATE',\r\n\t'ACTIVITY_INVITE',\r\n\t'NOTIFICATION_CREATE',\r\n\t'MESSAGE_CREATE',\r\n\t'MESSAGE_UPDATE',\r\n\t'MESSAGE_DELETE',\r\n\t'LOBBY_DELETE',\r\n\t'LOBBY_UPDATE',\r\n\t'LOBBY_MEMBER_CONNECT',\r\n\t'LOBBY_MEMBER_DISCONNECT',\r\n\t'LOBBY_MEMBER_UPDATE',\r\n\t'LOBBY_MESSAGE',\r\n\t'CAPTURE_SHORTCUT_CHANGE',\r\n\t'OVERLAY',\r\n\t'OVERLAY_UPDATE',\r\n\t'ENTITLEMENT_CREATE',\r\n\t'ENTITLEMENT_DELETE',\r\n\t'USER_ACHIEVEMENT_UPDATE',\r\n\t'SET_ACTIVITY',\r\n\t'READY',\r\n\t'ERROR',\r\n]);\r\n\r\nexport const RPCErrors = {\r\n\tCAPTURE_SHORTCUT_ALREADY_LISTENING: 5004,\r\n\tGET_GUILD_TIMED_OUT: 5002,\r\n\tINVALID_ACTIVITY_JOIN_REQUEST: 4012,\r\n\tINVALID_ACTIVITY_SECRET: 5005,\r\n\tINVALID_CHANNEL: 4005,\r\n\tINVALID_CLIENTID: 4007,\r\n\tINVALID_COMMAND: 4002,\r\n\tINVALID_ENTITLEMENT: 4015,\r\n\tINVALID_EVENT: 4004,\r\n\tINVALID_GIFT_CODE: 4016,\r\n\tINVALID_GUILD: 4003,\r\n\tINVALID_INVITE: 4011,\r\n\tINVALID_LOBBY: 4013,\r\n\tINVALID_LOBBY_SECRET: 4014,\r\n\tINVALID_ORIGIN: 4008,\r\n\tINVALID_PAYLOAD: 4000,\r\n\tINVALID_PERMISSIONS: 4006,\r\n\tINVALID_TOKEN: 4009,\r\n\tINVALID_USER: 4010,\r\n\tLOBBY_FULL: 5007,\r\n\tNO_ELIGIBLE_ACTIVITY: 5006,\r\n\tOAUTH2_ERROR: 5000,\r\n\tPURCHASE_CANCELED: 5008,\r\n\tPURCHASE_ERROR: 5009,\r\n\tRATE_LIMITED: 5011,\r\n\tSELECT_CHANNEL_TIMED_OUT: 5001,\r\n\tSELECT_VOICE_FORCE_REQUIRED: 5003,\r\n\tSERVICE_UNAVAILABLE: 1001,\r\n\tTRANSACTION_ABORTED: 1002,\r\n\tUNAUTHORIZED_FOR_ACHIEVEMENT: 5010,\r\n\tUNKNOWN_ERROR: 1000,\r\n};\r\n\r\nexport const RPCCloseCodes = {\r\n\tCLOSE_NORMAL: 1000,\r\n\tCLOSE_UNSUPPORTED: 1003,\r\n\tCLOSE_ABNORMAL: 1006,\r\n\tINVALID_CLIENTID: 4000,\r\n\tINVALID_ORIGIN: 4001,\r\n\tRATELIMITED: 4002,\r\n\tTOKEN_REVOKED: 4003,\r\n\tINVALID_VERSION: 4004,\r\n\tINVALID_ENCODING: 4005,\r\n};\r\n\r\nexport const LobbyTypes = {\r\n\tPRIVATE: 1,\r\n\tPUBLIC: 2,\r\n};\r\n\r\nexport const RelationshipTypes = {\r\n\tNONE: 0,\r\n\tFRIEND: 1,\r\n\tBLOCKED: 2,\r\n\tPENDING_INCOMING: 3,\r\n\tPENDING_OUTGOING: 4,\r\n\tIMPLICIT: 5,\r\n};\r\n","import process from 'process';\r\nimport { Snowflake } from './interface';\r\n\r\nfunction pid() {\r\n\tif (typeof process !== 'undefined') {\r\n\t\treturn process.pid;\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nconst uuid4122 = (): string =>\r\n\t// @ts-ignore\r\n\t([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (a) =>\r\n\t\t(a ^ ((Math.random() * 16) >> (a / 4))).toString(16),\r\n\t);\r\n\r\nexport { pid, uuid4122 };\r\n\r\nexport default {\r\n\tpid,\r\n\tuuid4122,\r\n};\r\n","import net from 'net';\r\nimport EventEmitter from 'events';\r\nimport { uuid4122 as uuid } from '../util';\r\nimport Client from '../client';\r\nimport { Presence, RawPresence, User } from '../interface';\r\nimport fetch from 'node-fetch';\r\n\r\nconst OPCodes = {\r\n\tHANDSHAKE: 0,\r\n\tFRAME: 1,\r\n\tCLOSE: 2,\r\n\tPING: 3,\r\n\tPONG: 4,\r\n};\r\n\r\nfunction getIPCPath(id: number): string {\r\n\tif (process.platform === 'win32') {\r\n\t\treturn `\\\\\\\\?\\\\pipe\\\\discord-ipc-${id}`;\r\n\t}\r\n\tconst {\r\n\t\tenv: { XDG_RUNTIME_DIR, TMPDIR, TMP, TEMP },\r\n\t} = process;\r\n\tconst prefix = XDG_RUNTIME_DIR || TMPDIR || TMP || TEMP || '/tmp';\r\n\treturn `${prefix.replace(/\\/$/, '')}/discord-ipc-${id}`;\r\n}\r\n\r\nfunction getIPC(id = 0, auto = true): Promise<{\r\n\tid: number;\r\n\tsock: net.Socket;\r\n}> {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst path = getIPCPath(id);\r\n\t\tconst onerror = () => {\r\n\t\t\tif (id < 10 && auto) {\r\n\t\t\t\tresolve(getIPC(id + 1, auto));\r\n\t\t\t} else {\r\n\t\t\t\treject(new Error('Could not connect'));\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst sock = net.createConnection(path, () => {\r\n\t\t\tsock.removeListener('error', onerror);\r\n\t\t\tresolve({\r\n\t\t\t\tid,\r\n\t\t\t\tsock,\r\n\t\t\t});\r\n\t\t});\r\n\t\tsock.once('error', onerror);\r\n\t});\r\n}\r\n\r\nfunction encode(op: number, data: object | string): Buffer {\r\n\tconst dataStr = JSON.stringify(data);\r\n\tconst len = Buffer.byteLength(dataStr);\r\n\tconst packet = Buffer.alloc(8 + len);\r\n\tpacket.writeInt32LE(op, 0);\r\n\tpacket.writeInt32LE(len, 4);\r\n\tpacket.write(dataStr, 8, len);\r\n\treturn packet;\r\n}\r\n\r\nconst working = {\r\n\tfull: '',\r\n\top: undefined as number | undefined,\r\n};\r\n\r\nfunction decode(\r\n\tsocket: net.Socket,\r\n\tcallback: (message: { op?: number; data: any }) => void,\r\n): void {\r\n\tconst packet = socket.read();\r\n\tif (!packet) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet { op } = working;\r\n\tlet raw: string;\r\n\tif (working.full === '') {\r\n\t\top = working.op = packet.readInt32LE(0);\r\n\t\tconst len = packet.readInt32LE(4);\r\n\t\traw = packet.slice(8, len + 8).toString();\r\n\t} else {\r\n\t\traw = packet.toString();\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst data = JSON.parse(working.full + raw);\r\n\t\tcallback({ op, data });\r\n\t\tworking.full = '';\r\n\t\tworking.op = undefined;\r\n\t} catch (err) {\r\n\t\tworking.full += raw;\r\n\t}\r\n\r\n\tdecode(socket, callback);\r\n}\r\n\r\nclass IPCTransport extends EventEmitter {\r\n\tclient: Client;\r\n\tsocket: net.Socket | null;\r\n\tipcId: number;\r\n\t_expecting: Map<any, any> = new Map();\r\n\tclientId!: string;\r\n\tuser!: User;\r\n\tactivity?: RawPresence;\r\n\tassets?: {\r\n\t\tid: string;\r\n\t\ttype: number;\r\n\t\tname: string;\r\n\t}[];\r\n\r\n\tconstructor(client: Client) {\r\n\t\tsuper();\r\n\t\tthis.client = client;\r\n\t\tthis.socket = null;\r\n\t\tthis.ipcId = 0;\r\n\t}\r\n\r\n\tasync connect(ipcId?: number): Promise<void> {\r\n\t\tconst data = await getIPC(ipcId ?? this.ipcId, ipcId ? false : true);\r\n\t\tthis.ipcId = data.id;\r\n\t\tconst socket = (this.socket = data.sock);\r\n\t\tsocket.on('close', this.onClose.bind(this));\r\n\t\tsocket.on('error', this.onClose.bind(this));\r\n\t\tthis.emit('open');\r\n\t\tsocket.write(\r\n\t\t\tencode(OPCodes.HANDSHAKE, {\r\n\t\t\t\tv: 1,\r\n\t\t\t\tclient_id: this.clientId,\r\n\t\t\t}),\r\n\t\t);\r\n\t\tsocket.pause();\r\n\t\tsocket.on('readable', () => {\r\n\t\t\tdecode(socket, ({ op, data }) => {\r\n\t\t\t\tswitch (op) {\r\n\t\t\t\t\tcase OPCodes.PING:\r\n\t\t\t\t\t\tthis.send(data, OPCodes.PONG);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase OPCodes.FRAME:\r\n\t\t\t\t\t\tif (!data) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.emit('message', data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase OPCodes.CLOSE:\r\n\t\t\t\t\t\tthis.emit('close', data);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tfetchAssets(): Promise<this> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tfetch(\r\n\t\t\t\t`https://discord.com/api/v9/oauth2/applications/${this.clientId}/assets`,\r\n\t\t\t)\r\n\t\t\t\t.then((r) => {\r\n\t\t\t\t\tif (r.ok) {\r\n\t\t\t\t\t\tr.json().then((assets: any) => {\r\n\t\t\t\t\t\t\tthis.assets = assets;\r\n\t\t\t\t\t\t\tresolve(this);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treject(r);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(reject);\r\n\t\t});\r\n\t}\r\n\r\n\tparseImageAnyToAsset(image?: string) {\r\n\t\tif (!image) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (/\\d{17,19}/.test(image)) {\r\n\t\t\tconst asset = this.assets?.find((a) => a.id == image);\r\n\t\t\tif (asset) {\r\n\t\t\t\treturn asset.name;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (image.startsWith('mp:external') && image.includes('/https/')) {\r\n\t\t\treturn 'https://' + image.split('/https/')[1];\r\n\t\t}\r\n\t\tif (image.startsWith('mp:')) {\r\n\t\t\treturn image.replace('mp:', 'https://media.discordapp.net/');\r\n\t\t}\r\n\t\treturn image;\r\n\t}\r\n\r\n\tgetActivity(): Presence | null {\r\n\t\tif (!this.activity) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst data = {\r\n\t\t\tstate: this.activity.state,\r\n\t\t\tdetails: this.activity.details,\r\n\t\t\tstartTimestamp: this.activity.timestamps?.start,\r\n\t\t\tendTimestamp: this.activity.timestamps?.end,\r\n\t\t\tlargeImageKey: this.parseImageAnyToAsset(\r\n\t\t\t\tthis.activity.assets?.large_image,\r\n\t\t\t),\r\n\t\t\tlargeImageText: this.activity.assets?.large_text,\r\n\t\t\tsmallImageKey: this.parseImageAnyToAsset(\r\n\t\t\t\tthis.activity.assets?.small_image,\r\n\t\t\t),\r\n\t\t\tsmallImageText: this.activity.assets?.small_text,\r\n\t\t\tinstance: this.activity.flags == 1 ? true : false,\r\n\t\t\tpartyId: this.activity.party?.id,\r\n\t\t\tpartySize: this.activity.party?.size?.[0],\r\n\t\t\tpartyMax: this.activity.party?.size?.[1],\r\n\t\t\tbuttons: this.activity.buttons?.map((name, index) => ({\r\n\t\t\t\tlabel: name,\r\n\t\t\t\turl: this.activity?.metadata?.button_urls?.[index],\r\n\t\t\t})),\r\n\t\t} as Presence;\r\n\t\treturn data;\r\n\t}\r\n\r\n\tonClose(e: any): void {\r\n\t\tthis.emit('close', e);\r\n\t}\r\n\r\n\tsend(data: object | string, op = OPCodes.FRAME): void {\r\n\t\tif (this.socket) {\r\n\t\t\tthis.socket.write(encode(op, data));\r\n\t\t}\r\n\t}\r\n\r\n\tclose(): Promise<void> {\r\n\t\treturn new Promise((r) => {\r\n\t\t\tthis.once('close', r);\r\n\t\t\tthis.send({}, OPCodes.CLOSE);\r\n\t\t\tif (this.socket) {\r\n\t\t\t\tthis.socket.end();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tping(): void {\r\n\t\tthis.send(uuid(), OPCodes.PING);\r\n\t}\r\n\r\n\tsetActivity(args: Presence, pid?: number): Promise<RawPresence> {\r\n\t\treturn this.client.setActivity(args, pid, this.ipcId);\r\n\t}\r\n\r\n\tclearActivity(pid?: number): Promise<any> {\r\n\t\treturn this.client.clearActivity(pid, this.ipcId);\r\n\t}\r\n}\r\n\r\nexport default IPCTransport;\r\nexport { encode, decode };\r\n"],"mappings":"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","names":["import_events","process","net","EventEmitter","data","fetch","pid","resolve","reject","pid"]}